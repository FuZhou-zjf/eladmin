server {
    listen 80;
    server_name _;  # 匹配所有请求，适用于开发环境
    index index.html;
    root /usr/share/nginx/html/eladmin/dist;  # 前端项目的静态文件路径

    # 避免 404 错误，确保所有路由都能正确加载
    location / {
        try_files $uri $uri/ @router;  # 如果请求路径不存在，转发给 @router
        index index.html;
    }

    location @router {
        rewrite ^.*$ /index.html last;  # 所有未匹配的路径都重写到 index.html
    }

    # 后端 API 代理设置，转发到 8000 端口的服务
    location /api {
        proxy_pass http://172.17.0.1:8000;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # CORS 头部设置，允许跨域请求
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';

        # 预检请求处理，返回 204 状态码
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;
        }
    }

    # 授权接口代理设置
    location /auth {
        proxy_pass http://172.17.0.1:8000;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # CORS 头部设置
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';

        # 预检请求处理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;
        }
    }

    # WebSocket 服务代理，适用于生产阶段的 /webSocket
    location /webSocket {
        proxy_redirect off;
        proxy_pass http://172.17.0.1:8000/webSocket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 60s;
        proxy_read_timeout 86400s;
        proxy_send_timeout 60s;
        proxy_buffering off;  # 防止 WebSocket 连接断开
    }

    # 头像文件代理
    location /avatar {
        proxy_pass http://172.17.0.1:8000;
    }

    # 文件上传代理
    location /file {
        proxy_pass http://172.17.0.1:8000;
    }

    # 开发阶段的 sockjs-node 服务代理（热重载 WebSocket）
    location /sockjs-node/ {
        proxy_pass http://172.17.0.1:8013/sockjs-node/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # CORS 头部设置，允许跨域请求
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';

        # 预检请求处理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;
        }
    }
}
